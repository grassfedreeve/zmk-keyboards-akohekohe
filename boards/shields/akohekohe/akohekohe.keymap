/*
 * Copyright (c) 2024 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&lt { quick-tap-ms = <200>; };

&soft_off { hold-time-ms = <5000>; };

/ {
    combos {
        compatible = "zmk,combos";

        qu {
            timeout-ms = <40>;
            key-positions = <2 1>;
            bindings = <&qu>;
            layers = <0>;
        };

        z {
            timeout-ms = <40>;
            key-positions = <19 18>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        v {
            timeout-ms = <40>;
            key-positions = <1 0>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            timeout-ms = <40>;
            key-positions = <20 19>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        lbrc {
            timeout-ms = <40>;
            key-positions = <0 9>;
            bindings = <&kp LBRC>;
            layers = <0 2>;
        };

        lbkt {
            timeout-ms = <40>;
            key-positions = <10 1>;
            bindings = <&kp LBKT>;
            layers = <0 2>;
        };

        lpar {
            timeout-ms = <40>;
            key-positions = <2 11>;
            bindings = <&kp LPAR>;
            layers = <0 2>;
        };

        lt {
            timeout-ms = <40>;
            key-positions = <3 12>;
            bindings = <&kp LT>;
            layers = <0 2>;
        };

        rbrc {
            timeout-ms = <40>;
            key-positions = <7 16>;
            bindings = <&kp RBRC>;
            layers = <0 2>;
        };

        rbkt {
            timeout-ms = <40>;
            key-positions = <6 15>;
            bindings = <&kp RBKT>;
            layers = <0 2>;
        };

        rpar {
            timeout-ms = <40>;
            key-positions = <5 14>;
            bindings = <&kp RPAR>;
            layers = <0 2>;
        };

        gt {
            timeout-ms = <40>;
            key-positions = <4 13>;
            bindings = <&kp GT>;
            layers = <0 2>;
        };

        capsword {
            timeout-ms = <40>;
            key-positions = <14 11>;
            bindings = <&caps_word>;
        };

        bspc {
            timeout-ms = <40>;
            key-positions = <16 14 15>;
            bindings = <&kp BSPC>;
        };

        del {
            timeout-ms = <40>;
            key-positions = <11 10 9>;
            bindings = <&kp DEL>;
        };

        fwslash {
            bindings = <&kp SLASH>;
            key-positions = <22 23>;
            timeout-ms = <40>;
            layers = <0>;
        };

        bkslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <22 21>;
            timeout-ms = <40>;
            layers = <0>;
        };

        apos {
            bindings = <&kp APOS>;
            key-positions = <6 7>;
            timeout-ms = <40>;
            layers = <0>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <6 5>;
            timeout-ms = <40>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <14 16>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <9 11>;
        };

        softoff {
            bindings = <&soft_off>;
            key-positions = <21 22 23>;
        };

        boot {
            bindings = <&bootloader>;
            key-positions = <20 19 18>;
        };

        lshift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <10 9>;
        };

        rshift {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <15 16>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 2>;
        };

        prtsc {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <5 7>;
            require-prior-idle-ms = <100>;
            timeout-ms = <40>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <7 0>;
        };
    };

    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods left";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods right";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;

            // global-quick-tap;

            bindings = <&kp>, <&kp>;
        };

        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COL";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COM_SEM";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
            label = "QU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        aptmak {
            bindings = <
                  &kp W               &kp F           &kp P           &kp B        &kp J         &kp L                     &kp U            &kp Y
&hl LEFT_SHIFT R  &hl LEFT_CONTROL S  &hl LEFT_ALT T  &hl LEFT_GUI H  &kp K        &kp X         &hr RIGHT_GUI N           &hr RIGHT_ALT A  &hr RIGHT_CONTROL I  &hr RIGHT_SHIFT O
                  &kp C               &kp G           &kp D                               &kp M  &comsem          &dotcol
                                                                      &lt 1 SPACE                                          &lt 2 E
            >;
        };

        nav {
            bindings = <
                      &kp LA(F4)                  &kp LG(LEFT)              &kp LG(RIGHT)             &kp LC(W)  &kp PAGE_UP                      &kp HOME                                 &kp UP    &kp END
&mt LEFT_SHIFT LC(Z)  &mt LEFT_CONTROL LC(LS(T))  &mt LEFT_ALT LS(LC(TAB))  &mt LEFT_WIN LC(TAB)      &kp LC(A)  &kp PAGE_DOWN                    &kp LEFT                                 &kp DOWN  &kp RIGHT  &kp INSERT
                      &kp LC(X)                   &kp LC(C)                 &mt LS(LC(V)) LS(INSERT)                            &kp LC(LS(LEFT))  &kp LS(LC(RIGHT))  &kp LS(LC(UP_ARROW))
                                                                                                      &trans                                                                               &mo 2
            >;
        };

        symnum {
            bindings = <
          &kp EXCL  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp EQUAL          &kp N1          &kp N2  &kp N3
&kp SEMI  &kp STAR  &kp UNDER    &kp MINUS  &kp PIPE    &kp N0             &kp N4          &kp N5  &kp N6  &kp COLON
          &kp PLUS  &kp PERCENT  &kp AMPS                          &kp N7  &kp N8  &kp N9
                                            &mo 1                                          &trans
            >;
        };

        fun {
            bindings = <
         &kp F1  &kp F2  &kp F3  &kp F10  &bt BT_SEL 0             &bt BT_SEL 1              &bt BT_SEL 2  &bt BT_SEL 3
&kp F12  &kp F4   &kp F5  &kp F6  &kp F11  &out OUT_TOG             &kp C_PP                  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE
         &kp F7   &kp F8  &kp F9                         &bootloader  &soft_off   &bt BT_CLR
                                  &trans                                                      &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun {
            if-layers = <2 1>;
            then-layer = <3>;
        };
    };
};
